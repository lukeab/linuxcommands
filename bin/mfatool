#!/bin/bash -e

##
#
# TODO: 
# lets use getopts to refine the options andparameter collection
# add option to return a code with no additoin test (quiet mode) to make it useful for scripting
# 
#
##

txtrst=$(tput sgr0)    # Reset text
txtbld=$(tput bold)    # Bold text
txtylw=$(tput setaf 3) # Yellow
#txtgrn=$(tput setaf 2) # Green text
#txtred=$(tput setaf 1) # Red text
bldgrn=${txtbld}$(tput setaf 2) # Bold Green
bldred=${txtbld}$(tput setaf 1) # Bold Red

scriptname="$(basename "$0")"

usage="

LAB mfatool
Tool for managing multifactor authentication tokens and generating access codes with the security of secret-tool and the keychain

Usage: $scriptname [options|--help] <user/email> <service/domain>

Options:
 --help|-h        show this help/usage
 --list           List all keys in the secret-tool keychain managed by lab mfatool
 --store          store a value into the keychain (uses secret-tool to write to the keychain), you will be prompted for a password by the secret-tool
 --all            Display all keys managed by mfatool at once in a line by line output
 --qr             Display QR code for <user/email> <service/domain>

Arguments:
 <user/email>     *required: the username or email address that identifies the key you want to use for the mfatool
 <service/domain> *required: the identifying service name or domain that the key is for

Examples:
 $scriptname --help
 $scriptname luke github.com
 $scriptname --store luke github.com
 $scriptname --all


"

nullmfakey=$(oathtool --base32 --totp "")
mfakey=''
totp_key=''
function get_mfatoken {

	mfakey=$(oathtool --base32 --totp "$(secret-tool lookup labmfatool 2016_01_10 username "${1}" service "${2}")")

	if [[ $nullmfakey == "${mfakey}" ]]; then
	  printf "%sNot Found:%s no MFA key found in keychain for %s%s%s@%s%s%s\n" "${bldred}" "${txtrst}" "${txtylw}" "${1}" "${txtrst}" "${txtylw}" "${2}" "${txtrst}"; 
	  exit 3;

	else
	  printf "MFA token for %s%s%s @ %s%s%s :\t%s%s%s\n" "${txtylw}" "${1}" "${txtrst}" "${txtylw}" "${2}" "${txtrst}" "${bldgrn}" "${mfakey}" "${txtrst}";
	fi
}

function output_qr_utf8 {
  #test for qrencode dependency
  type qrencode >/dev/null 2>&1 || { printf >&2 "%sERROR: %s I require %s'qrencode'%s command but it's not installed or not in the PATH.  Aborting.\n" "${bldred}" "${txtrst}" "${txtylw}" "${txtrst}"; exit 1; }
  #type qrencode >/dev/null 2>&1 || { printf >&2 "${bldred}ERROR: ${txtrst} I require 'qrencode' command but it's not installed or not in the PATH.  Aborting.\n"; exit 1; }
  get_totp_keys "${1}" "${2}"
  qrencode -t UTF8 "otpauth://totp/${2}:${1}?secret=${totp_key}"
  exit 0;
  
}

function get_totp_keys {
  totp_key=$(secret-tool lookup labmfatool 2016_01_10 username "${1}" service "${2}")

  if [[ $nullmfakey == "$totp_key" ]]; then
    printf "%sNot Found:%s no TOTP key found in keychain for %s%s%s@%s%s%s\n" "${bldred}" "${txtrst}" "${txtylw}" "${1}" "${txtrst}" "${txtylw}" "${2}" "${txtrst}"; 
    exit 3;

  else
    printf "TOTP key for %s%s%s @ %s%s%s :\t%s%s%s\n" "${txtylw}" "${1}" "${txtrst}" "${txtylw}" "${2}" "${txtrst}" "${bldgrn}" "${totp_key}" "${txtrst}"
  fi
}

if [[ "$1" == '--help'||"$1" == '-h' ]]; then
  printf "%s" "${usage}";
  exit 0;
fi

if [[ "$1" == '--list' ]]; then
	secret-tool search --all labmfatool 2016_01_10 2>/dev/null |grep "label = "|sed 's/\(.*\)@/\1 /' |awk '{print $3 " " $4}'

	exit 0;
fi

if [[ "$1" == '--all' ]]; then
  ACCOUNTLIST=$(secret-tool search --all labmfatool 2016_01_10 2>/dev/null |grep "label = "|sed 's/\(.*\)@/\1 /' |awk '{print $3 " " $4}')

  while read -r line; do
    get_mfatoken "${line}"
	done <<< "$ACCOUNTLIST"
  
  exit 0;
fi

if [[ "$1" == '--export' ]]; then
  ACCOUNTLIST=$(secret-tool search --all labmfatool 2016_01_10 2>/dev/null |grep "label = "|sed 's/\(.*\)@/\1 /' |awk '{print $3 " " $4}')
  while read -r line; do
    get_totp_keys "${line}"
  done <<< "$ACCOUNTLIST"

  exit 0;
fi

emailaddr=$1
service=$2

if [[ "$1" == '--store' ]] || [[ "$1" == '--qr' ]]; then
  emailaddr=$2
  service=$3
fi

if [[ "$emailaddr" == "" ]]; then
  printf "%sError:%s No user/email provided to identify the key.\n" "${bldred}" "${txtrst}"
  printf "%s" "${usage}";
  exit 1;
fi

if [[ "$service" == "" ]]; then
  printf "%sError:%s No service/domain name provided to identify the key.\n" "${bldred}" "${txtrst}"
  printf "%s" "${usage}";
  exit 2;
fi

if [[ "$1" == '--qr' ]]; then
  shift
  output_qr_utf8 "${emailaddr}" "${service}"
fi

if [[ "$1" == '--store' ]]; then
  secret-tool store --label "${emailaddr}@${service}" labmfatool 2016_01_10 username "${emailaddr}" service "${service}"
else
	get_mfatoken "${emailaddr}" "${service}"
fi
